"
	Boolean
	
	defines
	    Boolean
	    False
	    True
	    false
	    true
	    boolean
	        not
	        and:
	        or:
	        implies:
	        xor:
	        nand:
	        ifTrue:
	        ifFalse:
	        ifTrue:ifFalse:
	
	uses
	    Class ✓
	        with: ✓ 
	        extending:with: ✓
	    Error
	        raise:
	    dictionary
	        at:put:
	    object
	        =
	        :=
	        itself
	    block
	        expecting:
	        run
"
Boolean := (Class with: ({
	someMethods at: 'not' put: {
		"
			Answers ¬ this.
		"
		this = false
	}
	someMethods at: 'and:' put: ({
		"
			Answers this ∧ aBoolean.
		"
		(this = true) ifTrue: {
			aBoolean = true
		} ifFalse: {
			false itself
		}
	} expecting: ['aBoolean'])
	someMethods at: 'or:' put: ({
		"
			Answers this ∨ aBoolean.
		"
		(this = true) ifTrue: {
			true itself
		} ifFalse: {
			aBoolean = true
		}
	} expecting: ['aBoolean'])
	someMethods at: 'implies:' put: ({
		"
			Answers this → aBoolean.
		"
		(this not) or: aBoolean
	} expecting: ['aBoolean'])
	someMethods at: 'xor:' put: ({
		"
			Answers this ⊕ aBoolean.
		"
		(this or: aBoolean) and: ((this and: aBoolean) not)
	} expecting: ['aBoolean'])
	someMethods at: 'nand:' put: ({
		"
			Answers this ⊼ aBoolean.
		"
		(this and: aBoolean) not
	} expecting: ['aBoolean'])
	someMethods at: 'ifTrue:' put: ({
		"
			Answers the answer of aBlock if itself is true.
		"
		Error raise: 'should implement it'
	} expecting: ['aBlock'])
	someMethods at: 'ifFalse:' put: ({
		"
			Answers the answer of aBlock if itself is false.
		"
		Error raise: 'should implement it'
	} expecting: ['aBlock'])
	someMethods at: 'ifTrue:ifFalse:' put: ({
		"
			Answers the answer of aTrueBlock if itself is true, of aFalseBlock if itself is false.
		"
		Error raise: 'should implement it'
	} expecting: ['aTrueBlock' 'aFalseBlock'])
} expecting: ['someConstructors' 'someMethods' 'someVariables']))
False := (Class extending: Boolean with: ({
	someMethods at: 'ifTrue:' put: ({
		"
			Answers nothing.
		"
		Nothing itself
	} expecting: ['aBlock'])
	someMethods at: 'ifFalse:' put: ({
		"
			Answers the answer of aBlock.
		"
		aBlock run
	} expecting: ['aBlock'])
	someMethods at: 'ifTrue:ifFalse:' put: ({
		"
			Answers the answer of aFalseBlock.
		"
		aFalseBlock run
	} expecting: ['aTrueBlock' 'aFalseBlock'])
} expecting: ['someConstructors' 'someMethods' 'someVariables']))
True := (Class extending: Boolean with: ({
	someMethods at: 'ifTrue:' put: ({
		"
			Answers the answer of aBlock.
		"
		aBlock run
	} expecting: ['aBlock'])
	someMethods at: 'ifFalse:' put: ({
		"
			Answers nothing.
		"
		Nothing itself
	} expecting: ['aBlock'])
	someMethods at: 'ifTrue:ifFalse:' put: ({
		"
			Answers the answer of aTrueBlock.
		"
		aTrueBlock run
	} expecting: ['aTrueBlock' 'aFalseBlock'])
} expecting: ['someConstructors' 'someMethods' 'someVariables']))
false := (False new)
true := (True new)
