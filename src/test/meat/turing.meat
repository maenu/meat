"
	Turing machine implementation with meat.
	
	Adds one to a binary number.
"

dictionary := (Dictionary new)
variables := (Set new)
variables add: (Variable named: 'dictionary' is: dictionary)
mappingOracle := .
(mappingOracle oracle) define: 'respondTo:receiving:' perform: ({
	function := (dictionary at: (context selector))
	function runIn: context
} with: variables)

statefulOracle := .
(statefulOracle oracle) define: 'respondTo:receiving:' perform: {
	
}

Class := .
(Class oracle) define: 'new' performing: {
	class := .
	class oracle: classOracle
	class instanceOracle: instanceOracle
	class self
}

Machine := (Class new)
(Machine oracle) define: 'with: states blank: blank startingIn: startState finishedIn: finishedStates transitingWith: transition' performing: {
	
}
(Machine behavior) define: 'process: tape' performing: {
	(this isFinished) whileFalse: {
		translation := (transition in: state read: (tape read))
		state := (translation state)
		tape write: (translation symbol)
		tape move: (translation movement)
	}
}
(Machine behavior) define: 'isFinished' performing: {
	finishedStates includes: state
}

states := (Set new)
states add: -1
states add: 0
states add: 1
states add: 2
startState := 0
finishedStates := (Set new)
finishedStates add: -1
tape := (Tape from: '10010101001')
transition := (Transition with: {
	"
		move to lowest bit
	"
	((state = 0) and: (symbol = 0)) ifTrue: {
		(Translation to: 0 writing: 0 moving: 1)
	}
	((state = 0) and: (symbol = 1)) ifTrue: {
		(Translation to: 0 writing: 1 moving: 1)
	}
	((state = 0) and: (symbol = blank)) ifTrue: {
		(Translation to: 1 writing: blank moving: -1)
	}
	"
		add one
	"
	((state = 1) and: (symbol = 0)) ifTrue: {
		(Translation to: 2 writing: 1 moving: -1)
	}
	((state = 1) and: (symbol = 1)) ifTrue: {
		(Translation to: 1 writing: 0 moving: -1)
	}
	((state = 1) and: (symbol = blank)) ifTrue: {
		(Translation to: -1 writing: 1 moving: 0)
	}
	"
		move to highest bit
	"
	((state = 2) and: (symbol = 0)) ifTrue: {
		(Translation to: 2 writing: 0 moving: -1)
	}
	((state = 2) and: (symbol = 1)) ifTrue: {
		(Translation to: 2 writing: 1 moving: -1)
	}
	((state = 2) and: (symbol = blank)) ifTrue: {
		(Translation to: -1 writing: blank moving: 1)
	}
})
machine := (Machine with: states blank: blank startingIn: startState finishedIn: finishedStates transitingWith: transition)

machine process: tape